const ProductRequest = require('../models/notification/productRequest.model');
const Product = require('../models/product/product.model');

// 1. G·ª≠i y√™u c·∫ßu nh·∫≠n s·∫£n ph·∫©m
exports.createRequest = async (req, res) => {
  try {
    const { productId, message } = req.body;

    const product = await Product.findById(productId);
    if (!product) return res.status(404).json({ message: 'Product not found' });

    if (product.user_id.toString() === req.user.id) {
      return res.status(400).json({ message: 'B·∫°n kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu t·ªõi s·∫£n ph·∫©m c·ªßa ch√≠nh m√¨nh' });
    }

    // üîπ Ch·∫∑n khi s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c duy·ªát cho ai ƒë√≥
    if (['approved', 'given'].includes(product.status)) {
      return res.status(400).json({ message: 'S·∫£n ph·∫©m n√†y ƒë√£ ƒë∆∞·ª£c t·∫∑ng cho ng∆∞·ªùi kh√°c' });
    }

    // üîπ Ch·∫∑n khi user n√†y ƒë√£ ƒë∆∞·ª£c duy·ªát cho s·∫£n ph·∫©m n√†y
    const existingApproved = await ProductRequest.findOne({
      product: productId,
      requester: req.user.id,
      status: 'approved'
    });
    if (existingApproved) {
      return res.status(400).json({ message: 'B·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát nh·∫≠n s·∫£n ph·∫©m n√†y' });
    }

    // üîπ Ch·∫∑n khi user ƒë√£ g·ª≠i request v√† ƒëang ch·ªù duy·ªát
    const existingPending = await ProductRequest.findOne({
      product: productId,
      requester: req.user.id,
      status: 'pending'
    });
    if (existingPending) {
      return res.status(400).json({ message: 'B·∫°n ƒë√£ g·ª≠i request tr∆∞·ªõc ƒë√≥ v√† ƒëang ch·ªù duy·ªát.' });
    }

    const newRequest = new ProductRequest({
      product: productId,
      requester: req.user.id,
      message
    });

    await newRequest.save();
    res.status(201).json({ message: 'Request created successfully', request: newRequest });
  } catch (err) {
    res.status(500).json({ message: 'Server error' });
  }
};


// 2. L·∫•y danh s√°ch y√™u c·∫ßu theo s·∫£n ph·∫©m (ch·ªß s·ªü h·ªØu)
exports.getRequestsByProduct = async (req, res) => {
  try {
    const productId = req.params.productId;
    const product = await Product.findById(productId);

    if (!product) return res.status(404).json({ message: 'Product not found' });

    if (product.user_id.toString() !== req.user.id) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng ph·∫£i ch·ªß s·∫£n ph·∫©m' });
    }

    const requests = await ProductRequest.find({ product: productId }).populate('requester', 'name email');
    res.json({ requests });
  } catch (err) {
    res.status(500).json({ message: 'Server error' });
  }
};

// 3. Duy·ªát m·ªôt y√™u c·∫ßu (ch·ªß s·ªü h·ªØu)
exports.approveRequest = async (req, res) => {
  try {
    const requestId = req.params.requestId;

    const request = await ProductRequest.findById(requestId);
    if (!request) return res.status(404).json({ message: 'Request not found' });

    const product = await Product.findById(request.product);
    if (!product) return res.status(404).json({ message: 'Product not found' });

    if (product.user_id.toString() !== req.user.id) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng ph·∫£i ch·ªß s·∫£n ph·∫©m' });
    }

    request.status = 'approved';
    await request.save();

    // T·ª´ ch·ªëi c√°c request kh√°c
    await ProductRequest.updateMany(
      { product: product._id, _id: { $ne: request._id } },
      { $set: { status: 'rejected' } }
    );

    // C·∫≠p nh·∫≠t s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c t·∫∑ng
    product.status = 'given';
    await product.save();

    res.json({ message: 'ƒê√£ duy·ªát ng∆∞·ªùi nh·∫≠n s·∫£n ph·∫©m', request });
  } catch (err) {
    res.status(500).json({ message: 'Server error' });
  }
};

// 4. Ki·ªÉm tra tr·∫°ng th√°i request c·ªßa user hi·ªán t·∫°i v·ªõi 1 s·∫£n ph·∫©m
exports.checkRequestStatus = async (req, res) => {
  try {
    const productId = req.params.productId;

    const request = await ProductRequest.findOne({
      product: productId,
      requester: req.user.id
    });

    if (!request) return res.json({ status: 'none' });

    res.json({ status: request.status });
  } catch (err) {
    res.status(500).json({ message: 'Server error' });
  }
};

//  5. H·ªßy request
// exports.cancelRequest = async (req, res) => {
//   try {
//     const { requestId } = req.params;

//     const request = await ProductRequest.findById(requestId);
//     if (!request) return res.status(404).json({ error: 'Request kh√¥ng t·ªìn t·∫°i.' });

//     if (String(request.requester) !== req.user.id) {
//       return res.status(403).json({ error: 'B·∫°n kh√¥ng th·ªÉ h·ªßy request c·ªßa ng∆∞·ªùi kh√°c.' });
//     }

//     if (request.status !== 'pending') {
//       return res.status(400).json({ error: 'Ch·ªâ c√≥ th·ªÉ h·ªßy request ƒëang ch·ªù.' });
//     }

//     request.status = 'cancelled';
//     await request.save();

//     res.json({ message: 'ƒê√£ h·ªßy request.', request });
//   } catch (err) {
//     res.status(500).json({ error: err.message });
//   }
// };
