import axios from "axios";

const API_URL = import.meta.env.VITE_API_URL || "http://localhost:5000/api";
axios.defaults.withCredentials = true;

const getAuthHeaders = () => {
  const token = localStorage.getItem("token");
  return {
    Authorization: `Bearer ${token}`,
  };
};

export const productService = {
  // üîπ L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
  getAllProducts: async () => {
    try {
      const res = await axios.get(`${API_URL}/products`);
      return res.data.products;
    } catch (err) {
      console.error("L·ªói khi l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m:", err);
      return [];
    }
  },

  // üîπ L·∫•y s·∫£n ph·∫©m c√≤n kh·∫£ d·ª•ng (ch∆∞a t·∫∑ng)
  getAvailableProducts: async () => {
    try {
      const res = await axios.get(`${API_URL}/products/available`);
      return res.data.products;
    } catch (err) {
      console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m c√≤n kh·∫£ d·ª•ng:", err);
      return [];
    }
  },

  // üîπ L·∫•y s·∫£n ph·∫©m ƒë√£ cho (ƒë√£ t·∫∑ng)
  getGivenProducts: async () => {
    try {
      const res = await axios.get(`${API_URL}/products/given`);
      return res.data.products;
    } catch (err) {
      console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m ƒë√£ cho:", err);
      return [];
    }
  },

  // üîπ L·∫•y s·∫£n ph·∫©m ph·ªï bi·∫øn
  getPopularProducts: async () => {
    try {
      const res = await axios.get(`${API_URL}/products/popular`);
      return res.data.products;
    } catch (err) {
      console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m ph·ªï bi·∫øn:", err);
      return [];
    }
  },

  // üîπ L·∫•y s·∫£n ph·∫©m theo ID
  getProductById: async (id) => {
    try {
      const res = await axios.get(`${API_URL}/products/${id}`);
      return res.data.product;
    } catch (err) {
      console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m theo ID:", err);
      return null;
    }
  },

  // üîπ L·∫•y s·∫£n ph·∫©m m·ªõi nh·∫•t
  getNewProducts: async () => {
    try {
      const res = await axios.get(`${API_URL}/products/new`);
      return res.data.products;
    } catch (err) {
      console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m m·ªõi nh·∫•t:", err);
      return [];
    }
  },

  // üîπ L·∫•y s·∫£n ph·∫©m theo category
  getProductsByCategory: async (categoryId) => {
    try {
      const res = await axios.get(`${API_URL}/products/category/${categoryId}`);
      return res.data.products;
    } catch (err) {
      console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m theo category:", err);
      return [];
    }
  },

  // üîπ L·∫•y s·∫£n ph·∫©m c·ªßa t√¥i
  getMyProducts: async () => {
    try {
      const res = await axios.get(`${API_URL}/products/my`, {
        headers: getAuthHeaders(),
      });
      return res.data.products;
    } catch (err) {
      console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m c·ªßa t√¥i:", err);
      return [];
    }
  },

  // üîπ L·∫•y s·∫£n ph·∫©m c·ªßa user kh√°c
  getProductsByUser: async (userId) => {
    try {
      const res = await axios.get(`${API_URL}/products/user/${userId}`);
      return res.data.products;
    } catch (err) {
      console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m c·ªßa user:", err);
      return [];
    }
  },

  // üîπ T·∫°o s·∫£n ph·∫©m m·ªõi
  createProduct: async (formData) => {
    try {
      const res = await axios.post(`${API_URL}/products`, formData, {
        headers: {
          ...getAuthHeaders(),
          "Content-Type": "multipart/form-data",
        },
      });
      return res.data.product;
    } catch (err) {
      console.error("L·ªói khi t·∫°o s·∫£n ph·∫©m:", err.response?.data || err.message);
      throw err;
    }
  },

  // üîπ C·∫≠p nh·∫≠t s·∫£n ph·∫©m
  updateProduct: async (id, formData) => {
    try {
      const res = await axios.put(`${API_URL}/products/${id}`, formData, {
        headers: {
          ...getAuthHeaders(),
          "Content-Type": "multipart/form-data",
        },
      });
      return res.data.product;
    } catch (err) {
      console.error(
        "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:",
        err.response?.data || err.message
      );
      throw err;
    }
  },

  // üîπ X√≥a s·∫£n ph·∫©m
  deleteProduct: async (id) => {
    try {
      const res = await axios.delete(`${API_URL}/products/${id}`, {
        headers: getAuthHeaders(),
      });
      return res.data.message;
    } catch (err) {
      console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", err.response?.data || err.message);
      throw err;
    }
  },
};
